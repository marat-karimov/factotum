name: Release

on: 
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'     
        required: true

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    outputs:
      MSI_URL: ${{ steps.upload_msi.outputs.MSI_URL }}
      DMG_X64_URL: ${{ steps.upload_dmg_x64.outputs.DMG_X64_URL }}
      DMG_ARM64_URL: ${{ steps.upload_dmg_arm64.outputs.DMG_ARM64_URL }}

    steps:
      - name: Set VERSION variable
        shell: bash
        run: |
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Login to Azure CLI
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Xcode
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.2'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: environment.yml
          init-shell: bash powershell

      - name: Build python
        shell: powershell
        run: python setup.py build

      - name: Install node dependencies
        run: yarn install

      - name: Install Wix Toolset
        if: runner.os == 'Windows'
        run: |
          choco install wixtoolset -y --version 3.11.2
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
        
      - name: Setup env variables for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "${{ secrets.PFX_BASE64 }}" | base64 --decode > certificate.pfx
          echo "CSC_LINK=${{ github.workspace }}/certificate.pfx" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.PFX_PASSWORD }}" >> $GITHUB_ENV

      - name: Set up env variables for MacOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > certificate.p12
          echo "CSC_LINK=${{ github.workspace }}/certificate.p12" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.P12_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV

      - name: Build Electron app
        run: npm run pack

      - name: List dist dir
        run: echo $(ls dist dist/win-unpacked)
        shell: bash

      - name: Run Playwright tests
        run: npm run test

      - name: Make executables
        run: npm run dist

      - name: Upload test artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: trace
          path: trace/

      - name: Upload MSI to Azure Blob Storage and get URL
        if: runner.os == 'Windows'
        id: upload_msi
        run: |
          az storage blob upload --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} --name "${{ env.VERSION }}/Factotum.msi" --file "./dist/Factotum.msi" --container-name factotum
          url=$(az storage blob url --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} --name "${{ env.VERSION }}/Factotum.msi" --container-name factotum)
          echo "MSI_URL=$url" >> $GITHUB_ENV

      - name: Upload DMG x64 to Azure Blob Storage and get URL
        if: runner.os == 'macOS'
        id: upload_dmg_x64
        run: |
          az storage blob upload --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} --name "${{ env.VERSION }}/Factotum-x64.dmg" --file "./dist/Factotum-x64.dmg" --container-name factotum
          url=$(az storage blob url --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} --name "${{ env.VERSION }}/Factotum-x64.dmg" --container-name factotum)
          echo "DMG_X64_URL=$url" >> $GITHUB_ENV

      - name: Upload DMG arm64 to Azure Blob Storage and get URL
        if: runner.os == 'macOS'
        id: upload_dmg_arm64
        run: |
          az storage blob upload --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} --name "${{ env.VERSION }}/Factotum-arm64.dmg" --file "./dist/Factotum-arm64.dmg" --container-name factotum
          url=$(az storage blob url --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} --name "${{ env.VERSION }}/Factotum-arm64.dmg" --container-name factotum)
          echo "DMG_ARM64_URL=$url" >> $GITHUB_ENV


  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          MSI_URL: ${{ needs.build.outputs.MSI_URL }}
          DMG_X64_URL: ${{ needs.build.outputs.DMG_X64_URL }}
          DMG_ARM64_URL: ${{ needs.build.outputs.DMG_ARM64_URL }}
        run: |
          version=${{ github.event.inputs.version }}
          gh auth login --with-token <<< "${GH_TOKEN}"
          gh release create "v${version}" --repo ${{ github.repository }} --title "Release v${version}" --notes "
          Windows x64 Installer [Factotum.msi]($MSI_URL)
          MacOS Intel [Factotum-x64.dmg]($DMG_X64_URL)
          MacOS Apple Silicon [Factotum-arm64.dmg]($DMG_ARM64_URL)
          "