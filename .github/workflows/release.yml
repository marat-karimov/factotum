name: Release

on: 
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'     
        required: true

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    outputs:
      MSI_BLOB_NAME: ${{ steps.upload_msi.outputs.MSI_BLOB_NAME }}
      DMG_X64_BLOB_NAME: ${{ steps.upload_dmg_x64.outputs.DMG_X64_BLOB_NAME }}
      DEB_BLOB_NAME: ${{ steps.upload_deb.outputs.DEB_BLOB_NAME }}
      RPM_BLOB_NAME: ${{ steps.upload_rpm.outputs.RPM_BLOB_NAME }}
    env:
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}

    steps:

      - name: Login to Azure CLI
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Xcode
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.2'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Update package.json version
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Set VERSION variable
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install node dependencies
        run: yarn install

      - name: Make Git Bash a default shell for npm on Windows
        if: runner.os == 'Windows'
        run: npm config set script-shell "C:\\Program Files\\git\\bin\\bash.exe"

      - name: Setup Micromamba
        shell: bash
        run: npm run setup-micromamba

      - name: Setup venv
        shell: bash
        run: npm run setup-venv

      - name: Build server
        shell: bash
        run: npm run server:build

      - name: Install Wix Toolset
        if: runner.os == 'Windows'
        run: |
          choco install wixtoolset -y --version 3.11.2
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
        
      - name: Setup env variables for Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "${{ secrets.PFX_BASE64 }}" | base64 --decode > certificate.pfx
          echo "CSC_LINK=${{ github.workspace }}/certificate.pfx" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.PFX_PASSWORD }}" >> $GITHUB_ENV

      - name: Set up env variables for MacOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "${{ secrets.P12_BASE64 }}" | base64 --decode > certificate.p12
          echo "CSC_LINK=${{ github.workspace }}/certificate.p12" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.P12_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV

      - name: Build Electron app
        run: npm run pack

      - name: Run Playwright tests
        uses: coactions/setup-xvfb@v1
        with:
          run: npm run test:e2e

      - name: Run API tests
        run: npm run test:api

      - name: Make executables
        run: npm run dist

      - name: Upload test artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: trace
          path: trace/

      - name: Upload MSI to Azure Blob Storage
        if: runner.os == 'Windows'
        id: upload_msi
        shell: bash
        run: |
          name="${{ env.VERSION }}/Factotum.msi"
          az storage blob upload --name $name --file "./dist/Factotum.msi" --container-name factotum --overwrite
          echo "MSI_BLOB_NAME=$name" >> $GITHUB_OUTPUT

      - name: Upload DMG x64 to Azure Blob Storage
        if: runner.os == 'macOS'
        id: upload_dmg_x64
        run: |
          name="${{ env.VERSION }}/Factotum-x64.dmg"
          az storage blob upload --name $name --file "./dist/Factotum-x64.dmg" --container-name factotum --overwrite
          echo "DMG_X64_BLOB_NAME=$name" >> $GITHUB_OUTPUT

      - name: Upload DEB to Azure Blob Storage
        if: runner.os == 'Linux'
        id: upload_deb
        shell: bash
        run: |
          name="${{ env.VERSION }}/Factotum-amd64.deb"
          az storage blob upload --name $name --file "./dist/Factotum-amd64.deb" --container-name factotum --overwrite
          echo "DEB_BLOB_NAME=$name" >> $GITHUB_OUTPUT

      - name: Upload RPM to Azure Blob Storage
        if: runner.os == 'Linux'
        id: upload_rpm
        shell: bash
        run: |
          name="${{ env.VERSION }}/Factotum-x86_64.rpm"
          az storage blob upload --name $name --file "./dist/Factotum-x86_64.rpm" --container-name factotum --overwrite
          echo "RPM_BLOB_NAME=$name" >> $GITHUB_OUTPUT


  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
      MSI_BLOB_NAME: ${{ needs.build.outputs.MSI_BLOB_NAME }}
      DMG_X64_BLOB_NAME: ${{ needs.build.outputs.DMG_X64_BLOB_NAME }}
      DEB_BLOB_NAME: ${{ needs.build.outputs.DEB_BLOB_NAME }}
      RPM_BLOB_NAME: ${{ needs.build.outputs.RPM_BLOB_NAME }}
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Update package.json version
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Set VERSION variable
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to Azure CLI
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      
      - name: Download MSI from Azure Blob Storage
        run: |
          az storage blob download --name $MSI_BLOB_NAME --file "./Factotum.msi" --container-name factotum
          az storage blob delete --name $MSI_BLOB_NAME --container-name factotum

      - name: Download DMG x64 from Azure Blob Storage
        run: |
          az storage blob download --name $DMG_X64_BLOB_NAME --file "./Factotum-x64.dmg" --container-name factotum
          az storage blob delete --name $DMG_X64_BLOB_NAME --container-name factotum

      - name: Download DEB from Azure Blob Storage
        run: |
          az storage blob download --name $DEB_BLOB_NAME --file "./Factotum-amd64.deb" --container-name factotum
          az storage blob delete --name $DEB_BLOB_NAME --container-name factotum

      - name: Download RPM from Azure Blob Storage
        run: |
          az storage blob download --name $RPM_BLOB_NAME --file "./Factotum-x86_64.rpm" --container-name factotum
          az storage blob delete --name $RPM_BLOB_NAME --container-name factotum

      - name: Create Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.PAT }}"
          automatic_release_tag: "v${{ env.VERSION }}"
          draft: false
          prerelease: false
          title: "Release ${{ env.VERSION }}"
          files: |
            ./Factotum.msi
            ./Factotum-x64.dmg
            ./Factotum-amd64.deb
            ./Factotum-x86_64.rpm

      - name: Commit and push new version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update version to ${{ env.VERSION }}"
          git push