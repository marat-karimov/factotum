import {
  app,
  BrowserWindow,
  ipcMain,
  Menu,
  clipboard,
  globalShortcut,
} from "electron";
import * as localshortcut from "electron-localshortcut";
import { MainMenu } from "./menu";

import { spawnPythonProcess } from "./spawnPython";
import {
  sendAppendToLogs,
  sendGetSqlToRun,
  sendHideSearchBox,
  sendRenderCurrentEngine,
  sendRenderSearchBox,
} from "./ipcDispatcher";
import { SqlHandler } from "./sqlHandler";
import { ImportFilesHandler as ImportFilesHandler } from "./importFileHandler";
import { ExportFileHandler } from "./exportFileHandler";
import { Heartbeat } from "./heartbeat";
import { EngineSwitchHandler } from "./engineSwitchHandler";
import { sendKill } from "./requestDispatcher";
import { Engine } from "../types/types";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const defaultEngine: Engine = "polars";

spawnPythonProcess(defaultEngine);

let mainWindow: BrowserWindow;

function createWindow() {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      enableBlinkFeatures: "CSSColorSchemeUARendering",
    },
    width: 800,
    darkTheme: true,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (process.env.NODE_ENV === "development") {
    mainWindow.webContents.openDevTools();
  }
}

async function handleSearch() {
  sendRenderSearchBox(mainWindow);
  localshortcut.register(mainWindow, "Escape", () => {
    sendHideSearchBox(mainWindow);
  });
}

async function handleRunSql() {
  sendGetSqlToRun(mainWindow);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow();

  mainWindow.webContents.on("did-finish-load", () => {
    sendAppendToLogs(mainWindow, {
      message: `Import files to start working!
    Files are added as tables to a virtual database`,
      kind: "info",
    });
    sendRenderCurrentEngine(mainWindow, defaultEngine);
  });

  const sqlHandler = new SqlHandler(mainWindow);
  const importFilesHandler = new ImportFilesHandler(mainWindow, sqlHandler);
  const exportFileHandler = new ExportFileHandler(mainWindow);
  const heartbeat = new Heartbeat(mainWindow, app);
  heartbeat.startSendingHeartbeats();

  const engineSwitch = new EngineSwitchHandler(
    mainWindow,
    defaultEngine,
    heartbeat
  );

  const mainMenuBuilder = new MainMenu({
    mainWindow,
    importFilesHandler: importFilesHandler.handleImportFile,
    exportFileHandler: exportFileHandler.handleExportFile,
    runSqlHandler: handleRunSql,
    searchHandler: handleSearch,
    engineSwitchHandler: engineSwitch.handleEngineSwitch,
  });

  const mainMenu = mainMenuBuilder.buildMenu();
  Menu.setApplicationMenu(mainMenu);

  sqlHandler.setMainMenu(mainMenu);
  engineSwitch.setMainMenu(mainMenu);

  ipcMain.on("sqlToValidate", sqlHandler.handleSqlToValidate);
  ipcMain.on("sqlToRun", sqlHandler.handleSqlToRun);

  ipcMain.on("copyToClipboard", (_: Electron.IpcMainEvent, data: string) => {
    clipboard.writeText(data);
  });

  function unregisterEsc() {
    localshortcut.unregister(mainWindow, "Escape");
  }

  ipcMain.on("searchBoxHidden", unregisterEsc);

  app.on("activate", function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  app.quit();
});

// Invoke self-destruction in python process when the Electron app is closed
app.on("before-quit", () => {
  sendKill();
});

app.on("will-quit", () => {
  // Unregister all shortcuts.
  globalShortcut.unregisterAll();
});
