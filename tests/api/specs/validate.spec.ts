import { spawnPythonProcess } from "../../../src/main/spawnPython";
import { waitForServerToStart, closeServer } from "../helpers/server";
import { ChildProcessWithoutNullStreams } from "child_process";
import { Engine, ValidateResponse } from "../../../src/types/types";
import { makeRequest } from "../helpers/request";

const engines = ["polars", "duckdb"];

describe.each(engines)("Engine: %s", (engine) => {
  let server: ChildProcessWithoutNullStreams;

  beforeAll(async () => {
    server = spawnPythonProcess(engine as Engine);
    await waitForServerToStart(server);
    await makeRequest("/import_file", { file_path: "tests/assets/test.csv" });
  });

  afterAll(async () => {
    await closeServer(server);
  });

  test("SQL Validation - Wrong SQL", async () => {
    // Prepare SQL
    const first_statement = "select * from test2";
    const second_statement = "select * from test1";
    const data = `--comment\n ${first_statement}; ${second_statement}`;

    // Make request
    const response: ValidateResponse = await makeRequest("/validate", { data });

    // Define expected response
    const expectedResponse = {
      result: false,
      last_statement: second_statement,
      sql: `${first_statement};${second_statement}`,
      error: expect.anything(), // Error message is generated by SQL engine, so we don't assert the exact text
    };

    // Check response
    expect(response).toEqual(expectedResponse);
  });

  test("SQL Validation - Correct SQL", async () => {
    // Prepare SQL
    const first_statement = "select * from test2";
    const second_statement = "select * from test";
    const data = `--comment\n ${first_statement}; ${second_statement}`;

    // Make request
    const response: ValidateResponse = await makeRequest("/validate", { data });

    // Define expected response
    const expectedResponse = {
      result: true,
      last_statement: second_statement,
      sql: `${first_statement};${second_statement}`,
      error: null as null,
    };

    // Check response
    expect(response).toEqual(expectedResponse);
  });
});
